<?php

/**
 * hook_commerce_currency_info_alter
 * Remove decimal places from HKD
 */
function svetexpo2_commerce_currency_info_alter(&$currencies){
  // Add format_callback to remove decimal places from all prices in RUB
  $currencies['RUB']['format_callback'] = 'svetexpo2_commerce_currency_format';  
}

/**
 * Currency format callback
 *
 * Remove decimal places from output
 * while keeping commerce_amount_to_decimal formatting the same
 *
 * See: commerce_currency_format
 */
function svetexpo2_commerce_currency_format($amount, $currency, $object = NULL, $convert = TRUE) {
  
  // Format the price as a number, use 0 for no decimal places in output
  $price = number_format(commerce_currency_round(abs($amount), $currency), 0, $currency['decimal_separator'], $currency['thousands_separator']);

  // Establish the replacement values to format this price for its currency.
  $replacements = array(
    '@code_before' => $currency['code_placement'] == 'before' ? $currency['code'] : '',
    '@symbol_before' => $currency['symbol_placement'] == 'before' ? $currency['symbol'] : '',
    '@price' => $price,
    '@symbol_after' => $currency['symbol_placement'] == 'after' ? $currency['symbol'] : '',
    '@code_after' => $currency['code_placement'] == 'after' ? $currency['code'] : '',
    '@negative' => $amount < 0 ? '-' : '',
    '@symbol_spacer' => $currency['symbol_spacer'],
    '@code_spacer' => $currency['code_spacer'],
  );

  return trim(t('@code_before@code_spacer@negative@symbol_before@price@symbol_spacer@symbol_after@code_spacer@code_after', $replacements));
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function svetexpo2_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $form['submit']['#ajax'] = array(
	'callback' => 'svetexpo2_get_data_ajax',
/*	'progress' => array(
                //'message' => 'wait..',
    ), 
	*/
  );
  //$form['submit']['#ajax']['progress']['message'] = 'Wait';
  $form['#submit'][] = 'svetexpo2_add_to_cart_form_submit';
}


function svetexpo2_get_data_ajax($form, &$form_state){
	drupal_get_messages();
	$q = $form['quantity']['#value'];
	$cart_block = module_invoke('commerce_cart', 'block_view', 'cart');
	$product_id = $form['product_id']['#value'];
	$product = commerce_product_load($product_id);
//	$img = str_replace(array('/', '.', '(', ')', ' '), '_', trim($product->sku));
    $img = str_replace(array('/', '.', '(', ')','№', '=', ' '), '_', trim($product->sku));
    $search  = array('А', 'Т');
    $replace = array('a', 't');
    $img = str_replace($search, $replace, $img);
    $img = strtolower($img);
	
	$query = new EntityFieldQuery;
	$query->entityCondition('entity_type', 'node', '=')
		->propertyCondition('type', 'lamp')
		->fieldCondition('field_product', 'product_id', $product->product_id, '=')
		->range(0, 1);
		
	if($result = $query->execute()) {
		$nid = array_shift(array_keys($result['node']));
		$node = node_load($nid);
		$tid = $node->field_brand['und'][0]['tid'];
		$brand = strtolower(taxonomy_term_load($tid)->name);
		$price = commerce_currency_format($product->commerce_price['und']['0']['amount'],$product->commerce_price['und']['0']['currency_code']);
		if($q > 1){
			$sum = $q*$product->commerce_price['und']['0']['amount'];
			$fprice = $q.' шт. х '.$price.' = '.commerce_currency_format($sum, $product->commerce_price['und']['0']['currency_code']);
		}
		else $fprice = $price;
			
		$append ='';
		$append .= '<div id="cart_msg_bg"></div>';
		$append .= '<div id="cart_msg_content">';
			$append .= '<div id = "cart_msg_close"></div>';
			$append .= '<h2>Товар добавлен в корзину</h2>';
			$append .= '<img id="cart_msg_img" src = "http://img.svetexpo.ru/goods/images/'.$brand.'/'.$img.'.jpg" >';
			$append .= l($node->title, 'node/'.$node->nid);
			$append .= '<div id = "cart_msg_price">'.$fprice.'</div>';
			$append .= '<div style = "clear: both;"></div><span id = "cart_msg_close">продолжить покупки</span><a class = "button" href = "/cart">Перейти в корзину</a>';
		$append .= '</div>';
	}
    //return drupal_json_output($array);
	return array(
		'#type' => 'ajax',
		'#commands' => array(
			ajax_command_html('.cart_box .cart_content', render($cart_block['content'])),
			ajax_command_html('#cart_msg', $append),
		),
	);
}

 
/**
 * "Add to cart" button ajax callback.
 */
function svetexpo2_add_to_cart_ajax_callback($form, &$form_state) {
  drupal_get_messages();
  $cart_block = module_invoke('commerce_cart', 'block_view', 'cart');
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_html('.cart_box .cart_content', render($cart_block['content'])),//#block-commerce-cart-cart .content
	  ajax_command_alert('Товар добавлен в корзину'),
    ),
  );
}
 
/**
 * "Add to cart" button submit callback.
 */
function svetexpo2_add_to_cart_form_submit($form, &$form_state){
  $form_state['rebuild'] = TRUE;
}

/** 
* open 1st level categories by link path(!) not depth & menu
*/
function svetexpo2_menu_link_alter(&$item){
	if ($item['link_path']=='taxonomy/term/1' or $item['link_path']=='taxonomy/term/13') 
		$item['expanded'] = 1;
}